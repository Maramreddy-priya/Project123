{
	"name": "join_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ordersdata",
						"type": "DatasetReference"
					},
					"name": "orderdetails"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "Detailsdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "joindata",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     paramfilename as string",
				"}",
				"source(output(",
				"          Order_ID as string,",
				"          Order_Date as string,",
				"          CustomerName as string,",
				"          State as string,",
				"          City as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orderdetails",
				"source(output(",
				"          {Order ID} as string,",
				"          Amount as string,",
				"          Profit as string,",
				"          Quantity as string,",
				"          Category as string,",
				"          {Sub-Category} as string,",
				"          PaymentMode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Detailsdata",
				"orderdetails, Detailsdata join(Order_ID == {Order ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Order_ID as string,",
				"          Order_Date as string,",
				"          CustomerName as string,",
				"          State as string,",
				"          City as string,",
				"          {Order ID} as string,",
				"          Amount as string,",
				"          Profit as string,",
				"          Quantity as string,",
				"          Category as string,",
				"          {Sub-Category} as string,",
				"          PaymentMode as string",
				"     ),",
				"     partitionFileNames:[($paramfilename)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Order_ID,",
				"          Order_Date,",
				"          CustomerName,",
				"          State,",
				"          City,",
				"          {Order ID},",
				"          Amount,",
				"          Profit,",
				"          Quantity,",
				"          Category,",
				"          {Sub-Category},",
				"          PaymentMode",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}